var Matrix = function(width, height) {
    this.cursorX = 0;
    this.cursorY = 0;
    this.maxY = 0;
    this.isOverflow = 0;
    this.width = width || 16;
    this.height = height || 14;
    this.bitmap = [];
    for (var i = 0; i < this.height; i++) {
        this.bitmap[i] = [];
        for (var j = 0; j < this.width; j++) {
            this.bitmap[i][j] = 0;
        }
    }
}

Matrix.prototype.clearBitmap = function() {
    this.cursorX = 0;
    this.cursorY = 0;
    this.maxY = 0;
    this.isOverflow;
    this.width = 16;
    this.height = 13;
    this.bitmap = [];
    for (var i = 0; i < this.height; i++) {
        this.bitmap[i] = [];
        for (var j = 0; j < this.width; j++) {
            this.bitmap[i][j] = 0;
        }
    }
}


Matrix.prototype.writeChar = function(c) {
    trace("writeChar:");
    trace(c);
    if (c == "<") {
        this.cursorX -= 1;
    } else if (c == ">") {
        this.cursorX += 1;
    } else if (c == "|") {
        this.breakLine();


    } else if (c == "^") {
        this.cursorY -= 1;
    } else {
        var b = this.getBitmapOfChar(c);
        for (var i = 0; i < b.height; i++) {
            for (var j = 0; j < b.width; j++) {
                this.bitmap[this.cursorY + i][this.cursorX + j] = b.bitmap[i][j];
            }
        }
        this.cursorX += b.width;
        this.maxY = Math.max(this.cursorY + b.height, this.maxY);
        this.putSpace();
    }
}

Matrix.prototype.getBitmapOfChar = function(c) {
    var b = {
        bitmap: [],
        width: 0,
        height: 0,
    }
    b.bitmap = require("Bitmap").getBitmap(c);
    if (!b.bitmap) {
        throw "Character Not Found" + c;
    }

    b.height = b.bitmap.length;
    b.width = b.bitmap[0].length;
    return b;
}

Matrix.prototype.printBitmap = function(zero, one) {
    if (!zero) zero = "_";
    if (!one) one = "*";
    for (var i = 0; i < this.height; i++) {
        for (var j = 0; j < this.width; j++) {
            process.stdout.write(this.bitmap[i][j] ? one : zero);
        }
        process.stdout.write("\n");
    }
}

Matrix.prototype.getBitmap = function() {
    return this.bitmap;
}

Matrix.prototype.setBitmap = function(bitmap) {
    return this.bitmap = bitmap;
}

Matrix.prototype.writeString = function(str) {
    var str = new String(str);
    trace(str)
    for (var i = 0; i < str.length; i++) {
    trace(i)
        this.writeChar(str.charAt(i));
    }
}

Matrix.prototype.breakLine = function() {
    this.cursorY = this.maxY + 1;
    this.cursorX = 0;
}
Matrix.prototype.putSpace = function() {
    this.cursorX += 1;
}

module.exports = Matrix;
